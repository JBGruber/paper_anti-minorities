---
title: 3_annotation
author: Johannes B. Gruber
date: today
format:
  html:
    toc: true
    toc_depth: 3
    toc_float: true
    number_sections: true
    embed-resources: true
---

# Introduction

- who is talking about LGBTQ?
- Is the statement referring to LGBTQ+ rights
- Is the statement using LGBTQ+ rights to draw boundaries between in-groups (natives) and out-groups (immigrants)?
- If so, who is the excluded group

prompt:

Analyse the following paragraph and answer these questions about it:

1. Is the statement referring to LGBTQ+ rights or issues? Answer only with {yes} or {no}

If yes:

2. Is this paragraph talking {positive} about LGBTQ+ rights or issues (e.g., as part of a broader commitment to equality and human rights) or {negative} about LGBTQ+ rights or issues (e.g., framing LGBTQ+ identities as deviant, harmful, or undesirable)
3. Which political party, or member thereof, is making the statement? Return only the party (e.g., {Labour})

If 2 is positive:

4. Is support for LGBTQ+ rights in this paragraph conditional. Specifically, is the support for LGBTQ+ issues framed within the context of immigration or ethnonationalism.

Only give factual answers to the question. If there is no correct answer based on the text, return NA. Do not make things up.

## Packages

I use httr2 to pull articles from the Guardian API.

```{r setup}
#| include: false
library(tidyverse)
library(glue)
library(rollama)
start <- Sys.time() # note start time for later
prototype <- FALSE
```

## Data

```{r}
paragraphs <- readRDS("data/lgbtq_party_paragraphs.rds") |> 
  filter(nchar(text) < 1000)
if (prototype) {
  set.seed(1)
  paragraphs <- paragraphs |> 
    sample_n(20)
}
```


# Main

I retain only paragraphs that feature both a keyword from the LGBTQ list and one from the party list.

```{r}
annotate <- function(txts, category, clss = "{Yes}, {No}", examples, id) {
  queries <- map(txts, function(txt) {
    tribble(
      ~role, ~content,
      "system", glue("Classify the provided text on whether it {category}. These are the classes {clss}. Answer only with the class, nothing else."),
    ) |> 
      bind_rows(examples) |> 
      bind_rows(tribble(
        ~role, ~content,
        "user", glue("\"{txt}\"")
      ))
  })
  
  out <- query(
    q = queries,
    screen = FALSE,
    model = "llama3.1:8b-instruct-q8_0", 
    output = "text",
    #format = "json",
    model_params = list(seed = 42, temperature = 0)
  )
  if (interactive()) cli::cli_alert_success("annotation {id} done")
  return(out)
}
```

```{r}
category_1 <- "mentions anything positive about LGBTQ+ rights or issues (e.g., as part of a broader commitment to equality and human rights)"
examples_1 <- tribble(
  ~role, ~content,
  "user", "\"As a society, we have made significant progress on LGBTQ+ rights, ensuring that every individual, regardless of their gender or sexuality, is treated equally under the law. Labour is committed to continuing this work for a more inclusive future.\"",
  "assistant", "{Yes}",
  "user", "\"The Conservative Party stands firmly in support of LGBTQ+ rights. However, we must acknowledge that certain immigrant groups hold values that conflict with our commitment to equality, and we need to address these differences to protect our nation's liberal principles.\"",
  "assistant", "{Yes}",
  "user", "\"The Green Party is focused on addressing transgender rights, climate change and economic inequality.\"",
  "assistant","{Yes}",
)

category_2 <- "mentions anything negative about LGBTQ+ rights or issues (e.g., framing LGBTQ+ identities as deviant, harmful, or undesirable)"
examples_2 <- tribble(
  ~role, ~content,
  "user", "\"As a society, we have made significant progress on LGBTQ+ rights, ensuring that every individual, regardless of their gender or sexuality, is treated equally under the law. Labour is committed to continuing this work for a more inclusive future.\"",
  "assistant", "{No}",
  "user", "\"The Conservative Party stands firmly in support of LGBTQ+ rights. However, we must acknowledge that certain immigrant groups hold values that conflict with our commitment to equality, and we need to address these differences to protect our nation's liberal principles.\"",
  "assistant", "{No}",
  "user", "\"The Green Party is focused on addressing transgender rights, climate change and economic inequality.\"",
  "assistant","{No}",
)

category_3 <- "mentions anything negative about people not from the country"
examples_3 <- tribble(
  ~role, ~content,
  "user", "\"As a society, we have made significant progress on LGBTQ+ rights, ensuring that every individual, regardless of their gender or sexuality, is treated equally under the law. Labour is committed to continuing this work for a more inclusive future.\"",
  "assistant", "{No}",
  # "user", "\"The Conservative Party stands firmly in support of LGBTQ+ rights. However, we must acknowledge that certain immigrant groups hold values that conflict with our commitment to equality, and we need to address these differences to protect our nation's liberal principles.\"",
  # "assistant", "{Yes}",
  "user", "\"The Green Party is focused on addressing transgender rights, climate change and economic inequality.\"",
  "assistant","{No}",
)

category_4 <- "mentions a political party or a member of one"
classes_4 <- "all political parties in the UK or US (e.g., {Labour}, {Tories})"
examples_4 <- tribble(
  ~role, ~content,
  "user", "\"As a society, we have made significant progress on LGBTQ+ rights, ensuring that every individual, regardless of their gender or sexuality, is treated equally under the law. Labour is committed to continuing this work for a more inclusive future.\"",
  "assistant", "{NA}",
  "user", "\"The Conservative Party stands firmly in support of LGBTQ+ rights. However, we must acknowledge that certain immigrant groups hold values that conflict with our commitment to equality, and we need to address these differences to protect our nation's liberal principles.\"",
  "assistant", "{Conservative Party}",
)
```

```{r}
c(
  "Are you a good annotator?",
  "\"Arabs do not honor gay rights and should leave our country\"",
  "there are too many Blacks here",
  "Pizza is my favourite food",
  "The new iPhone is as ugly as the last one"
) |> 
  annotate(category = category_3, examples = NULL, id = 3L)
```

```{r}
c(
  "The Tories detest the poor"
) |> 
  annotate(category = category_4, clss = classes_4, examples = examples_4, id = 3L)
```

```{r}
c(
  "David Cameron, leader of the Tories, say he likes the gays",
  "Labour says they do not like Pizza",
  "The Greens want to stop climate change"
) |> 
  annotate(category = category_4, clss = classes_4, examples = NULL, id = 4L)
```


This retains:

```{r}
paragraphs_annotated <- paragraphs |> 
  # head(50) |> 
  mutate(
    lgbtq_pos = annotate(text, category = category_1, examples = examples_1, id = 1L),
    lgbtq_pos_wo = annotate(text, category = category_1, examples = NULL, id = 1L),
    
    lgbtq_neg = annotate(text, category = category_2, examples = examples_2, id = 2L),
    lgbtq_neg_wo = annotate(text, category = category_2, examples = NULL, id = 2L),
    
    antiimmigrant = annotate(text, category = category_3, examples = examples_3, id = 3L),
    antiimmigrant_wo = annotate(text, category = category_3, examples = NULL, id = 3L),
    
    party = annotate(text, category = category_4, examples = examples_4, id = 4L),
    party_wo = annotate(text, category = category_4, examples = NULL, id = 4L)
  )
```

```{r}
paragraphs_annotated |> 
  mutate(word = map_chr(word, toString)) |> 
  rio::export("annotation.xlsx")
```


```{r}
#| eval: false
#| echo: false
paragraphs_annotated_tidy <- paragraphs_annotated |> 
  rowwise() |> 
  mutate(annotation = str_extract(annotation, "\\{.+?\\}"),
         annotation = list(fromJSON(annotation))) |> 
  unnest_wider(annotation)

paragraphs_annotated_tidy |> 
  select(-id, -par_id, -word, -set, -query) |> 
  View("annotated")
```


# Wrap-up

```{r}
saveRDS(paragraphs_annotated, "data/lgbtq_party_paragraphs_annotated.rds")
```

Afterwards we get some information which is important to reproduce the report.

```{r}
sessionInfo()
Sys.time()
# note how long the script takes to (re-)run
Sys.time() - start
```
